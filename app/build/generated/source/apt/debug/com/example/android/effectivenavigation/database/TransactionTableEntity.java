// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.example.android.effectivenavigation.database;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.QueryAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public class TransactionTableEntity implements TransactionTable, Persistable {
    public static final QueryAttribute<TransactionTableEntity, Integer> ID = 
    new AttributeBuilder<TransactionTableEntity, Integer>("id", int.class)
    .setProperty(new IntProperty<TransactionTableEntity>() {
        @Override
        public Integer get(TransactionTableEntity entity) {
            return entity.id;
        }

        @Override
        public void set(TransactionTableEntity entity, Integer value) {
            entity.id = value;
        }

        @Override
        public int getInt(TransactionTableEntity entity) {
            return entity.id;
        }

        @Override
        public void setInt(TransactionTableEntity entity, int value) {
            entity.id = value;
        }
    })
    .setPropertyName("getId")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$id_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> CUSTOMER_MOBILE = 
    new AttributeBuilder<TransactionTableEntity, String>("customerMobile", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.customerMobile;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.customerMobile = value;
        }
    })
    .setPropertyName("getCustomerMobile")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$customerMobile_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$customerMobile_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, Integer> LOYALITY_PLUS = 
    new AttributeBuilder<TransactionTableEntity, Integer>("loyalityPlus", int.class)
    .setProperty(new IntProperty<TransactionTableEntity>() {
        @Override
        public Integer get(TransactionTableEntity entity) {
            return entity.loyalityPlus;
        }

        @Override
        public void set(TransactionTableEntity entity, Integer value) {
            if(value != null) {
                entity.loyalityPlus = value;
            }
        }

        @Override
        public int getInt(TransactionTableEntity entity) {
            return entity.loyalityPlus;
        }

        @Override
        public void setInt(TransactionTableEntity entity, int value) {
            entity.loyalityPlus = value;
        }
    })
    .setPropertyName("getLoyalityPlus")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$loyalityPlus_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$loyalityPlus_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, Integer> LOYALITY_MINUS = 
    new AttributeBuilder<TransactionTableEntity, Integer>("loyalityMinus", int.class)
    .setProperty(new IntProperty<TransactionTableEntity>() {
        @Override
        public Integer get(TransactionTableEntity entity) {
            return entity.loyalityMinus;
        }

        @Override
        public void set(TransactionTableEntity entity, Integer value) {
            if(value != null) {
                entity.loyalityMinus = value;
            }
        }

        @Override
        public int getInt(TransactionTableEntity entity) {
            return entity.loyalityMinus;
        }

        @Override
        public void setInt(TransactionTableEntity entity, int value) {
            entity.loyalityMinus = value;
        }
    })
    .setPropertyName("getLoyalityMinus")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$loyalityMinus_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$loyalityMinus_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> TRANSACTION_ID = 
    new AttributeBuilder<TransactionTableEntity, String>("transactionId", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.transactionId;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.transactionId = value;
        }
    })
    .setPropertyName("getTransactionId")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$transactionId_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$transactionId_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> STORE_ID = 
    new AttributeBuilder<TransactionTableEntity, String>("storeId", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.storeId;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.storeId = value;
        }
    })
    .setPropertyName("getStoreId")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$storeId_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$storeId_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> TRANSACTION_VALUE = 
    new AttributeBuilder<TransactionTableEntity, String>("transactionValue", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.transactionValue;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.transactionValue = value;
        }
    })
    .setPropertyName("getTransactionValue")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$transactionValue_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$transactionValue_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> TRANSACTION_TIME = 
    new AttributeBuilder<TransactionTableEntity, String>("transactionTime", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.transactionTime;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.transactionTime = value;
        }
    })
    .setPropertyName("getTransactionTime")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$transactionTime_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$transactionTime_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, Boolean> SYNC_STATUS = 
    new AttributeBuilder<TransactionTableEntity, Boolean>("syncStatus", boolean.class)
    .setProperty(new BooleanProperty<TransactionTableEntity>() {
        @Override
        public Boolean get(TransactionTableEntity entity) {
            return entity.syncStatus;
        }

        @Override
        public void set(TransactionTableEntity entity, Boolean value) {
            entity.syncStatus = value;
        }

        @Override
        public boolean getBoolean(TransactionTableEntity entity) {
            return entity.syncStatus;
        }

        @Override
        public void setBoolean(TransactionTableEntity entity, boolean value) {
            entity.syncStatus = value;
        }
    })
    .setPropertyName("getSyncStatus")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$syncStatus_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$syncStatus_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> TAX_COLLECTED = 
    new AttributeBuilder<TransactionTableEntity, String>("taxCollected", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.taxCollected;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.taxCollected = value;
        }
    })
    .setPropertyName("getTaxCollected")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$taxCollected_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$taxCollected_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> PRODUCT_ID = 
    new AttributeBuilder<TransactionTableEntity, String>("productId", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.productId;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.productId = value;
        }
    })
    .setPropertyName("getProductId")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$productId_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$productId_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> DISCOUNT = 
    new AttributeBuilder<TransactionTableEntity, String>("discount", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.discount;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.discount = value;
        }
    })
    .setPropertyName("getDiscount")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$discount_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$discount_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<TransactionTableEntity, String> GROSS = 
    new AttributeBuilder<TransactionTableEntity, String>("gross", String.class)
    .setProperty(new Property<TransactionTableEntity, String>() {
        @Override
        public String get(TransactionTableEntity entity) {
            return entity.gross;
        }

        @Override
        public void set(TransactionTableEntity entity, String value) {
            entity.gross = value;
        }
    })
    .setPropertyName("getGross")
    .setPropertyState(new Property<TransactionTableEntity, PropertyState>() {
        @Override
        public PropertyState get(TransactionTableEntity entity) {
            return entity.$gross_state;
        }

        @Override
        public void set(TransactionTableEntity entity, PropertyState value) {
            entity.$gross_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final Type<TransactionTableEntity> $TYPE = new TypeBuilder<TransactionTableEntity>(TransactionTableEntity.class, "TransactionTable")
    .setBaseType(TransactionTable.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<TransactionTableEntity>() {
        @Override
        public TransactionTableEntity get() {
            return new TransactionTableEntity();
        }
    })
    .setProxyProvider(new Function<TransactionTableEntity, EntityProxy<TransactionTableEntity>>() {
        @Override
        public EntityProxy<TransactionTableEntity> apply(TransactionTableEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(CUSTOMER_MOBILE)
    .addAttribute(TAX_COLLECTED)
    .addAttribute(GROSS)
    .addAttribute(LOYALITY_MINUS)
    .addAttribute(PRODUCT_ID)
    .addAttribute(DISCOUNT)
    .addAttribute(SYNC_STATUS)
    .addAttribute(TRANSACTION_VALUE)
    .addAttribute(TRANSACTION_TIME)
    .addAttribute(STORE_ID)
    .addAttribute(ID)
    .addAttribute(LOYALITY_PLUS)
    .addAttribute(TRANSACTION_ID)
    .build();

    private PropertyState $id_state;

    private PropertyState $customerMobile_state;

    private PropertyState $loyalityPlus_state;

    private PropertyState $loyalityMinus_state;

    private PropertyState $transactionId_state;

    private PropertyState $storeId_state;

    private PropertyState $transactionValue_state;

    private PropertyState $transactionTime_state;

    private PropertyState $syncStatus_state;

    private PropertyState $taxCollected_state;

    private PropertyState $productId_state;

    private PropertyState $discount_state;

    private PropertyState $gross_state;

    private int id;

    private String customerMobile;

    private int loyalityPlus;

    private int loyalityMinus;

    private String transactionId;

    private String storeId;

    private String transactionValue;

    private String transactionTime;

    private boolean syncStatus;

    private String taxCollected;

    private String productId;

    private String discount;

    private String gross;

    private final transient EntityProxy<TransactionTableEntity> $proxy = new EntityProxy<TransactionTableEntity>(this, $TYPE);

    public TransactionTableEntity() {
    }

    @Override
    public int getId() {
        return $proxy.get(ID);
    }

    @Override
    public String getCustomerMobile() {
        return $proxy.get(CUSTOMER_MOBILE);
    }

    public void setCustomerMobile(String customerMobile) {
        $proxy.set(CUSTOMER_MOBILE, customerMobile);
    }

    @Override
    public int getLoyalityPlus() {
        return $proxy.get(LOYALITY_PLUS);
    }

    public void setLoyalityPlus(int loyalityPlus) {
        $proxy.set(LOYALITY_PLUS, loyalityPlus);
    }

    @Override
    public int getLoyalityMinus() {
        return $proxy.get(LOYALITY_MINUS);
    }

    public void setLoyalityMinus(int loyalityMinus) {
        $proxy.set(LOYALITY_MINUS, loyalityMinus);
    }

    @Override
    public String getTransactionId() {
        return $proxy.get(TRANSACTION_ID);
    }

    public void setTransactionId(String transactionId) {
        $proxy.set(TRANSACTION_ID, transactionId);
    }

    @Override
    public String getStoreId() {
        return $proxy.get(STORE_ID);
    }

    public void setStoreId(String storeId) {
        $proxy.set(STORE_ID, storeId);
    }

    @Override
    public String getTransactionValue() {
        return $proxy.get(TRANSACTION_VALUE);
    }

    public void setTransactionValue(String transactionValue) {
        $proxy.set(TRANSACTION_VALUE, transactionValue);
    }

    @Override
    public String getTransactionTime() {
        return $proxy.get(TRANSACTION_TIME);
    }

    public void setTransactionTime(String transactionTime) {
        $proxy.set(TRANSACTION_TIME, transactionTime);
    }

    @Override
    public boolean getSyncStatus() {
        return $proxy.get(SYNC_STATUS);
    }

    public void setSyncStatus(boolean syncStatus) {
        $proxy.set(SYNC_STATUS, syncStatus);
    }

    @Override
    public String getTaxCollected() {
        return $proxy.get(TAX_COLLECTED);
    }

    public void setTaxCollected(String taxCollected) {
        $proxy.set(TAX_COLLECTED, taxCollected);
    }

    @Override
    public String getProductId() {
        return $proxy.get(PRODUCT_ID);
    }

    public void setProductId(String productId) {
        $proxy.set(PRODUCT_ID, productId);
    }

    @Override
    public String getDiscount() {
        return $proxy.get(DISCOUNT);
    }

    public void setDiscount(String discount) {
        $proxy.set(DISCOUNT, discount);
    }

    @Override
    public String getGross() {
        return $proxy.get(GROSS);
    }

    public void setGross(String gross) {
        $proxy.set(GROSS, gross);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof TransactionTableEntity && ((TransactionTableEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
